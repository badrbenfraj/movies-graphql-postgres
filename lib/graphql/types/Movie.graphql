type Movie {
  actors: [String]
  average_rating: Float
  backdrop: String
  countries: [String]
  directors: [String]
  genres: [String]
  id: String
  languages: [String]
  composers: [String]
  title: String
  production_companies: [String]
  poster: String
  release_date: String
  synopsis: String
  rating: Int
  runtime: Int
  tagline: String
  title: String
  user_email: String
  users_ratings: [Int]
  users_viewed: [String]
  user_id: Int
  view_date: String
  wilhelm: Boolean
  writers: [String]
  year: String
}

type ViewDate {
  date: String,
  userId: Int
}

type View {
  movie_id: Int,
  title: String,
  dates: [ViewDate]
  views_count: Int
}

enum PersonType {
  actor
  composer
  director
  writer
}

input RatingInput {
  userId: Int!,
  # ID in DB
  movieId: Int!,
  # New rating
  rating: Int!
}

input MovieInput {
  userId: Int!
  # IMDb ID or IMDb URL
  imdbId: String!
  rating: Int = 0
  date: String
  wilhelm: Boolean = false
}

type UpdatedRating {
  movie_id: Int
  rating: Int
}

type CountWithYear {
  count: Int
  year: String
}

type PersonInMovies {
  name: String
  number_of_movies: Int
  ranking: Int
}

type Watches {
  views_with_rewatches: Int
  total_views: Int
}

type Ratings {
  email: String
  name: String
  rating: Int
}

extend type Mutation {
  insertMovie(input: MovieInput!): Movie
  updateRating(input: RatingInput!): UpdatedRating
}

extend type Query {
  # Return a feed of all users watches or if provided with an ID only one users feed
  feed(userId: Int): [Movie]
  # Takes an optional ID that can be either the ID in the database OR an IMDb ID
  movies(movieId: Int, limit: Int = 50, offset: Int = 0): [Movie]
  bestForYears(userId: Int!, ranking: Int!): [Movie]
  moviesPerYear(year: String): [CountWithYear]
  moviesWithRating(rating: Int!): [Movie]
  person(name: String!, role: PersonType!): [Movie]
  ratings(movieId: Int): [Ratings]
  totalByPerson(userId: Int!, role: PersonType!, ranked: Int = 10, name: String): [PersonInMovies]
  totalByRole(userId: Int!, role: PersonType!): Int
  userMoviesPerYear(userId: Int!): [CountWithYear]
  views(userId: Int): [View]
  watches(userId: Int!): Watches
}
